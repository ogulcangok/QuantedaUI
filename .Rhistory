column(4,actionButton("help","Help"))),
#Creating First main tab DATA.
tabsetPanel(
tabPanel("Data",
textInput("notes", "Add Corpus Notes"),#Add a text input for adding some notes to metadata
column(12,#create a column with a width 12 and assign each 3 widths an action button and two checkbox
column(2, actionButton("addNotes", "Add Notes")),
column(3, checkboxInput("metadisp", "Display Metadata", value = FALSE)),
column(3, checkboxInput("summdisp", "Display Summary", value = FALSE)),
column(3,actionButton("helpData", "Help",width = 150))),
conditionalPanel(#checks if metadisp or summdisp is selected. If so shows the corresponding data
condition = "input.metadisp == true",
h1("Metadata"),
tableOutput("metaInfo")),
conditionalPanel(
condition = "input.summdisp == true",
h1("Summary"),
DT::dataTableOutput("summary")
),
tableOutput("contents")),
tabPanel("Explore",#Second main tab EXPLORE.
tabsetPanel(#Explore has many subtabs. Data tab shows the top and blow 10 of the given filter.
tabPanel("Graph",#Graph tab gives the boxplot of the given filter.
column(12,
column(5,selectInput("plotMenu","Select corpus filter",multiple = F,selectize = F,choices = c("Token", "Read"))),
column(5,actionButton("helpGraph", "Help",width = 150))),#Select a filter from a combobox
plotOutput("plotToken",dblclick = "plotTokenDbl")
),
tabPanel("Concordence",#Concordence tab draws a graph, which gives info about a word in all corpuses.
tabsetPanel(
tabPanel("Lexical Plot",
column(12,
column(8,selectInput("selectYear","Select Year",multiple = F,selectize = F,choices = c("2017", "2016", "2015", "2014"))),
column(4,actionButton("helpLexical","Help"))),
tableOutput("showSubset"),
column(3,textInput("keyWord", "Enter Your Key Word", width = 150)),
column(3,textInput("keyWord2", "Enter Your Key Word", width = 150)),
plotOutput("concordencePlot",dblclick = "concordencePlotDbl")),
tabPanel("Text Data",
column(12,
column(8,textInput("saveName","Enter The Subset Name")),
column(4,actionButton("helpText","Help"))),
column(3,downloadButton("save", "Save Subset")),
column(3,textInput("concoInput","Enter a Key Word")),
tableOutput("concordenceTextOut"))
))
)),
tabPanel("DFM",
tabsetPanel(
tabPanel("Plots",
column(12,
column(8,selectInput("plotSelect","Select Plot Type",c("Text Cloud","Frequency"),selected = NULL)),
column(4,actionButton("helpPlot","Help"))),
plotOutput("dfmPlot",dblclick = "dfmPlotDbl")
),
tabPanel("Grouping",
column(4,
selectInput("groupSelect","Select Grouping Type",c("year","input2"))),
column(4,
selectInput("plotSelectGroup", "Select Graph Type", c("Text Plot", "Baloon Plot"))),
column(4,actionButton("helpGroup","Help")),
checkboxInput("showSort","Show Info"),
conditionalPanel(
condition = "input.showSort == true",
h1("Sort Summary"),
tableOutput("sort")),
plotOutput("groupPlot",dblclick = "groupPlotDbl")
),
tabPanel("Frequency",
h3("If the frequency is 0 it will give you your keyword's frequency."),
column(6,
sliderInput("frequencyInput","Change the number of the top Words",min = 0,max = 30,value = 0)),
column(5,
textInput("frequencyKeyWord","Enter Your Own Key Word")),
column(4,actionButton("helpFreq","Help")),
plotOutput("frequencyPlot",dblclick ="frequencyPlotDbl" )
),
tabPanel("Keyness",
column(4,actionButton("helpKey","Help")),
plotOutput("keynessPlot",dblclick = "keynessPlotDbl")),
tabPanel("Dictionary",
column(12,
column(8, fileInput("file2","Upload Your Dictionary",multiple = FALSE,accept = ".dic")),
column(4,actionButton("helpLexical","Help"))),
tableOutput("dictTable"),
plotOutput("dictPlot",dblclick = "dictPlotDbl")),
tabPanel("Similarity",
tableOutput("similarity")
),
tabPanel("Clustering",
plotOutput("clustering"))
)
)
)#end of main tabsetPanel
))#end of main layout
runApp()
View(ui)
source("server.R",local = F)
source("ui.R",local = F )
runApp()
yearsList = c()
runApp()
runApp()
runApp()
runApp()
runApp()
yearsList <- reactiveVal()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(yearsList)
runApp()
remove(yearsList)
remove(ui)
remove(a)
remove(i)
remove(newYear)
remove(server())
remove(server()
})
remove(server)
runApp()
View(yearsList)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
install.packages("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
remove(ui)
remove(server)
remove(yearsList
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(2017,2015,2016)
a
cat(a)
runApp()
a
ch
ch <- matrix(a,nrow = length(a),ncol = 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(2017,2015,2016)
for (i in length(a))
{
b <- str(a[i])
print(b)
}
a <- c(2017,2015,2016)
for (i in length(a))
{
b <- str(a[i])
print(b)
}
a <- c(2017,2015,2016)
for (i in length(a))
{
b <- str(a[,i])
print(b)
}
a <- c(2017,2015,2016)
for (i in length(a))
{
b <- str(a[i,])
print(b)
}
a <- c(2017,2015,2016)
b <- str(a[1,])
print(b)
a <- c(2017,2015,2016)
b <- str(a[1])
print(b)
a <- c(2017,2015,2016)
b <- str(a[1])
print(b)
a <- c(2017,2015,2016)
b <- (a[1])
print(b)
runApp()
runApp()
runApp()
runApp()
runApp()
is.atomic(a)
runApp()
runApp()
runApp()
runApp()
runApp()
dim(a)
a <- unique(aidata$year)
dim(a)
matrix(a)
runApp()
runApp()
matrix(a)
a[1,1]
a[,1]
a
b <- matrix(a)
b
b[1,1]
runApp()
is.atomic(ch)
is.atomic(b)
is.atomic(a)
b <- data.frame(a)
ch <- b[1,1]
ch
is.atomic(b)
runApp()
is.atomic(b)
c(b)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- unique(aidata$year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- 2012
runApp()
runApp()
a <- 1
runApp()
runApp()
runApp()
runApp()
a <<- sort(unique(aidata$year))
runApp()
a <<- sort(unique(aidata$year))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dendextend")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("anytime")
runApp()
runApp()
aidata$Date <- anydate(aidata$Date)
runApp()
runApp()
b
runApp()
format(b,"%Y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
year <<- aidata$Date
runApp()
a <<- sort(unique(format(year,"%Y")))
year <<- aidata$Date
b <- year
remove(b)
runApp()
year <- years
years <- year
remove(year
)
runApp()
runApp()
year <- years
runApp()
runApp()
runApp()
runApp()
runApp()
years <- year
remove(year)
runApp()
help("aes")
runApp()
runApp()
runApp()
runApp()
remove(a)
remove(ch)
remove(i)
remove(years)
runApp()
runApp()
